# -*- coding: utf-8 -*-
"""Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4xF2INweym2M0QDhO71NzPvx7SabYQD
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

train_df = pd.read_csv('/content/sample_data/train.csv')
test_df  = pd.read_csv('/content/sample_data/test.csv')
test_df.head()
train_df.head()

x = train_df.drop(columns=['MedHouseVal']).values
y = train_df['MedHouseVal'].values
x_mean=x.mean(axis=0)
x_std=x.std(axis=0)
x_scaled=(x-x_mean)/x_std

x_test=test_df.values
x_test_scaled=(x_test-x_mean)/x_std

x_train, x_val, y_train, y_val = train_test_split(x_scaled, y, test_size=0.2, random_state=42)

print("Train split:", x_train.shape, "Validation split:", x_val.shape)
print("Test split:", x_test_scaled.shape)

class LinearRegression_from_scratch:
  def __init__(self,learning_rate,iterations):
    self.learning_rate=learning_rate
    self.iterations=iterations
    self.m=0.0
    self.b=0.0


  def fit(self,x,y):
    n_samples,n_features=x.shape
    self.m=np.zeros(n_features)
    self.b=0.0

    #gradient descent loop
    for i in range(self.iterations):
      predictions = x.dot(self.m) + self.b
      error = predictions - y
      dm = (1 / n_samples) * (x.T.dot(error))
      db = (1 / n_samples) * np.sum(error)
      # Update parameters
      self.m -= self.learning_rate * dm
      self.b -= self.learning_rate * db


  def predict(self,x):
    return x.dot(self.m) + self.b

model = LinearRegression_from_scratch(learning_rate=0.01, iterations=10000)
model.fit(x_train, y_train)

y_pred_val = model.predict(x_val)
rmse = np.sqrt(np.mean((y_val - y_pred_val) ** 2))
print(f"Validation RMSE: {rmse:.4f}")

# Scatter plot
plt.figure(figsize=(10, 8))
plt.scatter(y_val, y_pred_val, color='blue', alpha=0.5, label="Predictions")
plt.plot([y_val.min(), y_val.max()], [y_val.min(), y_val.max()], color='red', linestyle='--', label="Ideal Prediction (y = x)")
plt.xlabel("Actual MedHouseVal")
plt.ylabel("Predicted MedHouseVal")
plt.title("Predicted vs Actual Values (Validation Set)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Retrain on full training data
model_full = LinearRegression_from_scratch(learning_rate=0.01,iterations=10000)
model_full.fit(x_scaled, y)

# Predict on test data
y_test_pred = model_full.predict(x_test_scaled)

submission = pd.DataFrame({'id': test_df.index,'MedHouseVal': y_test_pred})
submission['MedHouseVal'] = submission['MedHouseVal'].round(2)
submission.to_csv('submission.csv', index=False)
print("Submission file saved")
print(submission.tail())

